Revisiting Online Privacy and Security Mechanisms Applied in
the In-App Payment Realm from the Consumers’ Perspective
Salatiel Ezennaya-Gomez

Edgar Blumenthal

Marten Eckardt

salatiel.ezennaya@ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

edgar.blumenthal@st.ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

marten.eckardt@st.ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

Justus Krebs

Christopher Kuo

Julius Porbeck

justus.krebs@st.ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

christopher.kuo@st.ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

julius.porbeck@st.ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

Emirkan Toplu

Stefan Kiltz

Jana Dittmann

emirkan.toplu@st.ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

kiltz@iti.cs.uni-magdeburg.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

jana.dittmann@ovgu.de
Otto-von-Guericke University
Magdeburg
Magdeburg, Sachsen-Anhalt
Germany

ABSTRACT
This paper presents an in-depth network data stream analysis on
data gathering to evaluate the current data protection situation of
online payment in smartphone applications. To this end, we applied a digital forensic methodology from previous work in the field,
analyzing network traffic generated by applications during a purchase process. We revisit previous work’s results on browser-based
payments and compare them to the current security and privacy
situation of in-app payments in 2022. We study an exemplary selection of ten mobile apps and four payment systems often used
by young consumers (i.e., between 20 and 25 years old): Paypal,
Google Pay, Klarna, and Visa/Mastercard credit cards. Furthermore,
we examine the apps concerning their trackers and applications’
privacy policies. For this purpose, we use OSINT sources to perform
a static tracker analysis and their purposes based on privacy policy
descriptions. Subsequently, we perform a dynamic analysis applying a man-in-the middle attack vector, which allows us to bypass
the TLS encryption of the smartphone’s HTTPS traffic, and analyze
the data stream payload. We repeatedly identify significant security
vulnerabilities and how applications handling sensitive data do not
follow standard recommendations in security and data protection
regulations during the result analysis. Moreover, some data sharing

This work is licensed under a Creative Commons Attribution-NonCommercial
International 4.0 License.
ARES 2022, August 23–26, 2022, Vienna, Austria
© 2022 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-9670-7/22/08.
https://doi.org/10.1145/3538969.3543786

is noticed, with sensitive data passed on to third parties. The data
obtained can also be used in application fields, such as by a forensic
expert in a financial crime case in steps of a forensic investigation.

CCS CONCEPTS
• Security and privacy → Economics of security and privacy;
Human and societal aspects of security and privacy; • Applied
computing → Network forensics.

KEYWORDS
In-app payments, security mechanisms, privacy awareness, network forensics, data streams
ACM Reference Format:
Salatiel Ezennaya-Gomez, Edgar Blumenthal, Marten Eckardt, Justus Krebs,
Christopher Kuo, Julius Porbeck, Emirkan Toplu, Stefan Kiltz, and Jana
Dittmann. 2022. Revisiting Online Privacy and Security Mechanisms Applied
in the In-App Payment Realm from the Consumers’ Perspective. In The 17th
International Conference on Availability, Reliability and Security (ARES 2022),
August 23–26, 2022, Vienna, Austria. ACM, New York, NY, USA, 12 pages.
https://doi.org/10.1145/3538969.3543786

1

INTRODUCTION

Consumer shopping via smartphone is mainstream due to the current Covid-19 pandemic, which is significantly impacting people’s
shopping behavior. According to recent studies in the US, nearly
42% of consumers bought their groceries online in 2020 in the wake
of the pandemic doubling the rate from 2018 [22]. Studies in Europe also show a similar picture, with 83% of respondents in one
study saying they generally shopped online in 2020 [3]. Global preferences on e-commerce payments have shifted from using credit

ARES 2022, August 23–26, 2022, Vienna, Austria

and debit cards towards digital and mobile wallets [17]. With this
rising usage, exploiting the system and stealing sensitive data are
increasing. One example is the modification of trackers in such a
way that it accepted third-party program code that collected all
the data entered by the user, such as credit card information, and
forwarded it to the attacker [20]. Notably, for this attack to succeed,
no malicious code in the smartphone app itself nor unusual special
permissions enforced by the smartphone OS is necessary. As highlighted by Feal. et al. (2021), including apps using non-dangerous
permissions, also collect sensitive data [16].
Extensive studies on the analysis of third-party mobile SDKs also
reveal privacy implications of its usage by developers [16]. These
works highlight mobile app behavior concretely for mobile payment
systems and business goals of fintech (financial companies) involved
in the payment process and highlight the lack of transparency by
the app developers and SDK providers regarding app behavior and
consistency with their privacy policies. Previous work on online
payments has focused on identifying security flaws of available
financial SDKs and users’ financial behavior that malicious actors
can exploit [9, 23, 24]. For instance, the authors in [24] identified
and listed flawed implementations in the four of China’s most used
third-party in-app payment SDKs (WeChat wallet, AliPay, UniPay,
and BadPay) by analyzing the checkout process from a protocollevel client-server key generation for the initiation of purchase to
confirmation of order status.
Despite the previous work on analyzing online available financial third-party mobile SDKs, studies on in-app payment behavior
while conducting actual payments are not as extensive as those
regarding online payments in e-commerce web applications. For
this reason, and inspired by previous work on privacy analysis and
digital forensic methods, This article presents an in-depth HTTPS
traffic analysis on data gathering to evaluate the current situation
of e-payments in smartphone wallet applications while aiming to
identify actions for identity theft in in-app payments as the Reconnaissance step of the kill chain [18].
We conduct a study of different types of online payment methods, i.e., digital and mobile wallets (Google Pay and Paypal), buy
now, pay later (Klarna in Europe), and credit/charge and debit cards
(Mastercard and Visa). At the same time, we extend the previous
work’s dataset of payment gateways. Unlike previous work on
browser-based payments, we analyze the popular and regularly
used payment methods via mobile applications among our university students. We compare the outcome with previous works’
results in [15], where the authors conducted a methodical study on
browser-based payments of three online payment systems (Paypal,
Klarna, and Amazon). For this purpose, our work adopted the following questions aiming to answer with the results of this analysis:

• (Q1) What entities are involved in an in-app payment process
for an item purchase? Are they relevant for the functionality
and service of the app?
• (Q2) What type of data non-purchase specific are gathering those entities? Where are these datasets consequently
stored?
• (Q3) Do these entities also gather information from the payment process?

Ezennaya-Gomez, et al.

• (Q4) What are the security and privacy measures employed
in these data-sharing processes?
• (Q5) Comparing current and previous work results, what
improvements in security and privacy vulnerabilities have
employed the payment providers?
Note that the static code analysis of the selected applications is
out of the scope of our analysis, also due to a lack of access to the
source code of the tested apps.
Our analysis intends to educate the users and empower them to
make informed decisions. In addition, the results and recommendations may also contribute to consumer privacy awareness and as a
guideline for consumer organizations and privacy advocates who
want to conduct a study on this issue, and law enforcement bodies
as a training guideline in data the identification of data traces for
police officers.
The paper is structured as follows: section 2 gives an overview
of the method used for the traffic analysis. Sections 3 and 4 describe
the methodology, experimental setup, and analysis tools used for
the intended purpose. Sections 5 and 6 present the results of the
analysis, and the discussion, respectively. Finally, we conclude and
highlight the main points of this work in section 7.

2

BACKGROUND

Methods and techniques from digital forensics can be applied for
security and privacy investigations to bolster results and enable
scrutiny of our findings. We base our data modeling on previous
work in digital forensics from [19]. This paper’s approach and
experimental setup are built upon existing work on semi-automatic
HTTPS traffic analysis for browser-based payments [15].
Data-centric examination approaches (DCEA) for digital forensics exist that are particularly useful for the chosen scenario of
in-app payments for its focus on data that is gathered, processed,
and communicated [19]. It relies on a system landscape analysis
as also motivated by [11] to gain a general understanding of the
systems involved in the examined scenario and determine the level
of detail selection, which impacts the quality of the findings concerning the effort necessary. Furthermore, this system landscape
analysis helps identify data flow and determine suitable forensic
methods to gather, investigate, analyze, and document relevant
data sources. According to [19], these can be separated into the
main memory data stream (𝐷𝑆 𝑀 ), mass storage data stream (𝐷𝑆𝑇 ),
and network data stream (𝐷𝑆 𝑁 ). Furthermore, each data stream
can be separated into eight forensic data types (see table 1). This
categorization helps identify appropriate forensic tools to gather,
investigate, analyze or document data. Part of the DCEA approach
defines six distinct sets of methods according to common properties
and availability on a system under examination. Also, it defines
six distinct sets of examination steps that share a similar part of
the sequence of methods used in digital forensics to structure the
forensic process. Their application and subsequent examination
constitute future work.
In [15], the author’s motivation was to identify potential actions
for identity theft during a payment process. They documented the
analysis following a structured digital forensic analysis described
below. They based their work on browser-based payments that
could be conducted either on a computer or phone. They applied

Revisiting Online Privacy and Security Mechanisms Applied in the In-App Payment Realm from the Consumers’ Perspective

Table 1: Forensic data types 𝐷𝑇1−8 by Kiltz (source: Kiltz, 2020,
p.65 [19])
Forensic Data Types

Description by Kiltz [19]

Raw data 𝐷𝑇1

A sequence of bits or data streams
from system components not classified
Data that is not or only partially
affected by the operating system
and application is influenced
Metadata describing other data
Change of behavior from system
and applications
Change of communication behavior of the system
Data from a running process
Data collected by the system during a session collected
Data created, edited or consumed
by the user content

Hardware data 𝐷𝑇2

Details about data 𝐷𝑇3
Configuration data 𝐷𝑇4
Communication 𝐷𝑇5
Process data 𝐷𝑇6
Session data 𝐷𝑇7
User data 𝐷𝑇8

web-scraping techniques to extract company names and purposes
of data gathering reflected in privacy policies websites.
Besides studies of payment SDK mentioned in section 1, related
work in auditing mobile application behavior and disclosing thirdparty data collection present similar methodologies as mentioned
above. Generally, the methodology consists of a static/dynamic
analysis of a set of mobile applications/websites. Then, contrasting
generated HTTP traffic and packet payload to their data collection
purposes terms, extracted via web-scraping, announced in their
(multi-lingual) privacy policies and terms of use. A method for the
extraction automation was presented in Libert’s work for auditing
data disclosure of third-parties data flows [21] for a given website.
Similar work was presented in [10] for free mobile applications
available in Google Play, although the term extraction was manual.

3

METHODOLOGY

In this section, we briefly describe the methodology employed for
our analysis. The methodology is divided onto four main steps
inspired by the kill chain model in [18] Preparation and selection of
the payment gateways and applications (𝑀1), Static privacy analysis (𝑀2), Dynamic traffic analysis (𝑀3), and Documentation of the
procedure (𝑀4).

3.1 𝑀1 - Selection of payment methods,
applications, and tools
Our goal is to study common payment methods in the in-app payment market. For this reason, we select Paypal, Google Pay, Klarna
Sofort (in Germany), and Visa/Mastercard as our targets. In addition, other payment gateways are popular (e.g., Stripe and Amazon
Pay). Our selection is based on existing authors’ accounts since we
adhere to data protection principles in research; each researcher
only got to see her/his personal related data. Regarding the target
applications, we based our dataset on applications that our university students (aged between 20 and 25) are customers of and
use regularly. For further traffic analysis, we select the method of

ARES 2022, August 23–26, 2022, Vienna, Austria

man-in-the-middle attack since it is necessary to inspect the data
in the packet payload. A detailed explanation of the selected tools
for the experimental setup and the target dataset is in Section 4.

3.2 𝑀2 - Static privacy analysis
In this step, we examine the selected apps using the reverse engineering application, Exodus Privacy [5], which is open source and
available online. This online resource extracts information about
what trackers and permissions are enabled in an application (file
.apk) published in applications marketplaces, e.g., Google Play [7] or
F-Droid [6], along with company owner and activity of the tracker
(information available online by the company owner). Moreover,
with this information at hand, in dynamic analysis, it is possible
to classify company providers and third-party companies into expected and unexpected. However, since our study is based on traffic
analysis, the application permission analysis used in numerous
existing privacy studies is unavailable.
Privacy policies published by the service provider are also included in the analysis to correctly identify the company owner’s
purpose of the digital agent or tracker. Once the information is
gathered, and according to it, we separate a tracker into being payment relevant or not payment relevant. We define payment relevant
category as those entities that process payment data along with
personal identifiable information (PII), e.g., consumer’s email, name,
credit card data, purchased item(s), payment tokens. On the other
hand, not payment relevant category encompasses companies which
are not directly related to the payment process (see table 2).

3.3 𝑀3 - Dynamic traffic analysis
In this step, we target the network data stream (𝐷𝑆 𝑁 ) from [19].
Packet payloads are extracted for all conversations in the traffic,
and the data are mapped to data types 𝐷𝑇1−8 (see Table 1) according to the data-centered examination methodology for a structured
documentation [19]. The traffic is recorded during the payment
process and the user interaction with the application activities for
the data gathering. Therefore, it is crucial to ensure low background
traffic to avoid interference during the analysis, such as deactivating/uninstalling unnecessary apps.
The experimental setup (see Section 4) circumvents TLS encryption by arranging the client’s side, and only the HTTPS packet
payload is inspected. A middle proxy is needed to circumvent TLS
encryption and further packet inspection. For this purpose, we
apply a man-in-the-middle attack, which consists of installing generated certificates of our middle proxy in our targeted simulated
phone (see figure 1). Thus, we configure our host to run a middle
proxy. Subsequently, the simulated phone internet connection is
configured to route all traffic through our middle proxy. See the
tool’s documentation in [12] for further detailed information.
The HTTPS traffic analysis strategy is separated into five main
stages where packet payloads are examined:
(1) Connections established between client and servers: companies
identified in 𝑀2, i.e., in privacy policies and trackers identified, are contrasted with server domains from conversations
registered in the traffic between the user’s client and external
servers.

ARES 2022, August 23–26, 2022, Vienna, Austria

Ezennaya-Gomez, et al.

Table 2: The columns present the selected payment methods, android application and version, and purpose classification by Google Play [7].
Payment Method

Paypal
Google Pay

Klarna Sofort
Visa/Mastercard

Applications

App purpose
classification

Installs [7]

H&M (v.2.53.0)
Roastmarket
Too Good To Go
Subway Surfers (v.2.24.2)
Stack (v3.4)
Wish
Ebay
MyProtein
L’Osteria (v.1.4.46)
Shein (v 7.9.0)

Lifestyle and fashion
Coffee online shop
Food and drink
Gaming
Gaming
Shopping
Shopping
Fitness & nutrition
Restaurant
Shopping

50,000,000+
50,000+
10,000,000+
1,000,000,000+
50,000,000+
500,000,000+
100,000,000+
1,000,000+
10,000+
100,000,000+

(2) Tracking hardware data: analysis of those conversations
which contain hardware data 𝐷𝑇2 .
(3) Tracking application data: analysis of those conversations
which contain application data, 𝐷𝑇3−7 .
(4) Tracking personal & purchase-related data: analysis of those
conversations which contain user’s data 𝐷𝑇8 , such as
customer-ID, email, and contain purchase data, such as credit
cards, but also including searched and purchased items.
(5) Security and privacy measures applied in communications:
analysis of the security and privacy measures applied to
protect transferred data during established connections.

3.4 𝑀4 - Documentation
In this step, we describe the proceedings of each step from above.
Table 3 summarizes the research questions presented in section
1 and the steps and stages of the methodology described above,
which attempt to answer our research questions.

4

EXPERIMENTAL SETUP

This section describes the experimental setup of the chosen tools
for step 𝑀3 and the application dataset output of 𝑀1. Furthermore,
a general action protocol followed by the user is described. The
data flow scenario for the analysis is an android based application,
shown in Figure 1. The components of the global scenario consist of a desktop IT system running an simulated android phone
(client’s phone), man-in-the-middle proxies (mitmproxy and BurpSuite proxies) [4, 12], and a packet sniffer (i.e., Wireshark [8]). The
components run along with application and payment providers,
plus third-party servers as part of the outer side.
We use a laptop with a running Linux/GNU operating system
(Manjaro Linux 𝑥86_64 with a 5.12.19 Kernel) as the client’s host
where the following described tools are installed for the client setup.
We set up a virtual smartphone using an android simulator, i.e.,
Genymotion in the version 𝑑𝑒𝑠𝑘𝑡𝑜𝑝3.2.1 [2].
The android version used is 6.0 since applications from version
7 (Nougat) onwards ignore added user certificates. This fact is essential for TLS encryption circumvention [1]. We exploit that some
developers provide up-to-date versions of their apps for older Android versions and ensure backward compatibility. The simulated
smartphone is equipped without Google services as default, if possible, to avoid background traffic. However, when analyzing some

Table 3: Summary of research questions and our approach
Research Questions

Steps of the approach (inspired by
[18] and [19])

Q1 What entities are involved in
an in-app payment process for an
item purchase? Are they relevant
for the functionality and service
of the app?
Q2 What type of data
non-purchase specific are
gathering those entities? Where
are these datasets consequently
stored?
Q3 Do these entities also gather
information from the payment
process?
Q4 What are the security and
privacy measures employed in
these data-sharing processes?
Q5 Comparing current and
previous work results, what
improvements in security and
privacy vulnerabilities have
employed the payment
providers?

𝑀1, 𝑀2, and 𝑀3: stage 1

𝑀3: stages 1, 2, 3

𝑀3: stage 4

𝑀3: stage 5

𝑀2,𝑀3, and Literature review

games and their in-app purchases, it is necessary to install Google
Play Store and register an account. For this, the Android emulator
provides Google applications additional package.
The first proxy in our toolchain is the open-source mitmproxy
7.0.4 [12]. It allows us to make the TLS encrypted data traffic with
the smartphone readable for our analysis. For this purpose, the
pre-master secrets sent by the client are stored. These are necessary for creating the master secret and the session key during the
TLS handshake. Furthermore, we forward the traffic to a second
proxy and thus can take a closer look at the data stream network.
Additionally, to mitmproxy, we decided to use BurpSuite Professional and Community (2021.10.1) as a second proxy. This tool has
an intuitive and straightforward visual payload inspection and is
complementary to Wireshark (𝑣.3.6).

Revisiting Online Privacy and Security Mechanisms Applied in the In-App Payment Realm from the Consumers’ Perspective

ARES 2022, August 23–26, 2022, Vienna, Austria

Figure 1: Experimental setup for gathering 𝐷𝑆 𝑁 . Figure (a) shows the global scenario of the data flow and components. Figure
(b) shows a detailed scenario with the user client, middle proxies, and external servers. The simulated phone is connected via
a bridged network interface and thus has its IP address in the local network. Due to the configured proxy, the logical data
flow runs from the phone to the host. The host then forwards the data packets addressed to the server. The toolchain is thus
transparent for the smartphone. The simulated phone, the proxies, and the packet inspector wireshark run locally on the host.

4.1

Action protocol performed by the user, and
selected applications

The customer or user must perform a purchase in each of the selected applications (see table 2). For this, we described the following
general action protocol to be followed by the user to complete a
purchase:
(1) Open application.
(2) Item search.
(3) Send the item to the basket.
(4) Select payment method and click Pay.
(5) Login into payment method (client is usually redirected to
payment company’s website) or input payment data.
(6) Accept the payment, and the client is redirected to the application (if applicable).
The download range of the selected apps goes from +10.000 downloads, e.i., L’Osteria, a german restaurant, to 1,000,000,000+ downloads of Subway Surfers in Google Play.

5

RESULTS

This section presents the results following the methodology described in section 3.

5.1 𝑀2 - Static online privacy analysis
The static analysis is performed using Exodus-Privacy. It yields an
overview of the tracker landscape we could expect to encounter
while interacting with the examined apps and purchasing items
(Q1).
The trackers listed by Exodus-Privacy from third-party vendors
are specialized in mobile advertising, such as com.appsflyer, or
com.applovin. Figure 4 and table 5 show all trackers along with
their company owners listed by Exodus Privacy and trackers relevant for the purchase process according to companies’ information,

respectively. Most of the trackers listed by Exodus-Privacy are verified afterward through dynamic analysis in subsection 5.2. They are
applied by third-party vendors specialized in mobile advertising,
such as AppsFlyer or Facebook Login. Such trackers collect origin
and user’s preferred language, user actions, such as clicks on ads,
or history of viewed items in visited marketplaces, among other
information. According to provider and third-party privacy policies,
most of the listed trackers collect data to create usage profiles to
enable later retargeting on other devices, e.g., browsers or other
installed apps, as AppsFlyer describes in its policies.
We found many trackers concurrently in multiple mobile apps,
as shown in figure 4. For example, Exodus Privacy listed Google
Analytics and Appflyer in four of the ten apps we examined. Furthermore, the static privacy analysis revealed that third-party trackers
might collect information related to the purchase. Some trackers
provide the customer with certain features, e.g., sharing products
and purchases from other apps within the mobile app. For instance,
the Facebook Analytics tracker appears in the 50% of the mobile app
dataset. It is designed to determine, among other things, whether
a user purchases products within an app. Google Analytics tracker
is also one of these frequent payment-related trackers, and it measures the quantity of in-app payments and the associated revenue
for the provider. Exodus Privacy detected nine different trackers
in the analyzed apps, with H&M and L’Osteria scoring best with
four trackers each. The gaming apps Subway Surfers and Stack
were particularly noticeable, where Exodus Privacy could detect 16
trackers each. In addition, about three trackers found by Exodus
Privacy are explicitly said to collect payment-related data per app.
We observed that during the app installation, there was no optin/opt-out prompt dialog informing about the trackers found by
Exodus Privacy.

ARES 2022, August 23–26, 2022, Vienna, Austria

Ezennaya-Gomez, et al.

Table 4: Data attributes from the H&M app, including their data types, data locations in the collected traffic, and an example of
which conversation the data attribute has been found.
𝐷𝑇 𝑠

Data attributes

Source

Conversation(s)

𝐷𝑇2
𝐷𝑇3

graphic map data
language, country, timezone,

client ⇐⇒ c.paypal.com
client ⇐⇒ www.paypal.com

𝐷𝑇5
𝐷𝑇6
𝐷𝑇7

domain, IP address
user agent, referer
authentication tokens,
session tokens
first name, last name

JSON packets
HTTP headers (GET and POST methods),
application data, request cookies, JSON
packages
request header, intercepted packets
HTTP headers
request cookies, HTTP requests,
JSON packets
JSON packet, email address, password, address, product data, transaction data

𝐷𝑇8

∀ client conversations ⇐⇒ external server(s)
client ⇐⇒ https://api.hm.com
client ⇐⇒ www.paypal.com, client
⇐⇒ px.ads.linkedin.com
client ⇐⇒ https://app2.hm.com

Table 5: The first column shows the trackers classified as relevant for the payment as the output of 𝑀1 and 𝑀2 results in section 5. All
connections were analyzed in the application dataset during the 𝑀3 step. Only 3 of the 10 apps had no unexpected connections regarding
the static analysis 𝑀2 output. Moreover, we found connections to servers as purchase relevant (PR) during the action protocol within the
unexpected connections.
Payment method
Paypal

Applications

Relevant for payment (𝑀2 output)

Unexpected conversations (𝑀3 output)

H&M (v.2.53.0)

Google Firebase Analytics
(GF).

Facebook, Twitter, Adobe, Optimizely
(PR), VK.com, Snapchat, LinkedIn (PR)

Roastmarket

Facebook Analytics (FA),
Google Analytics (GA),
GF.

Shopgate (PR), LinkedIn (PR),
Webmasterplan, Sovendus,
Tealium.

Too Good To Go

Huawei Mobile
Services(HMS), GF.

New Relic, People API, Facebook Graph

Subway Surfers (v.2.24.2)

ChartBoost, FA, GF,
ironSource.

Tapjoy, Flurry

Stack (v3.4)

—

Wish

Fyber ChartBoost, GF,
ironSource.
GA, GF.

—

Ebay

FA, GF.

—

MyProtein

FA, GF, HMS.

Pinterest (PR), clear-reports.com (PR),
Trustpilot, Yahoo, MyUnidays, Snapchat,
outbrain.com, adtarget.com, criteo.com,
sentry.io, thcdn.com, kk-resources.com,
smaato.net, s3xified.com, liveperson.net
(PR), lpsnmedia.net (PR), metrix.net,
loopme.me, creativecdn.com (PR),
bing.com (PR) , admedia.com, Tiktok
(PR), yandex.ru, Groupon

L’Osteria (v.1.4.46)

GA.

Facebook Pixel, E-Recruiter, Sendgrid

Shein (v 7.9.0)

FA, GA, GF, HMS

Forter.com, mpulse.net, adyen.com,
fitnanalytics.com, scarabresearch.com,
ltwebstatic.com, cybersource.com,
srmdata.com (PR).

Google Pay

Klarna Sofort

Visa/Mastercard

Revisiting Online Privacy and Security Mechanisms Applied in the In-App Payment Realm from the Consumers’ Perspective

ARES 2022, August 23–26, 2022, Vienna, Austria

Performed clicks
(1) Open the application
(2) Search for item (i.e., pair of socks)
(3) Add item to shopping cart
(4) Marketplace redirect to PayPal via
mobile browser
(5) Log in to PayPal
(6) Payment and redirection to the
H&M app
Figure 2: I/O conversation graph of H&M represents the filtered TLS packets in red created by Wireshark.

Figure 3: Locations of external servers which have established a connection with our client via trackers for the MyProtein app
(figure generated by Palladio [13])

5.2 𝑀3 - Dynamic traffic analysis
In this step, we followed the strategy explained in subsection 3.3.
The gathered data stream network 𝐷𝑆 𝑁 and data types 𝐷𝑇2,3,5−8
were mapped to attributes found in several packet payload fields,
e.g., in HTTP headers, request cookies, and JSON packets, using
the inspection tools of our man-in-the-middle attack setup. An
example of data types mapping is shown in table 4 which outlines
the data types found for the mobile app H&M. All attributes of the
data types were TLS-encrypted within the 𝐷𝑆 𝑁 , further readable
after TLS circumvention by the MITM setup. Exceptions to this are
connection setups before the TLS handshake, in which the user
agent was readable without encryption.
5.2.1 Connections established between client and servers
(Q1,Q2). For most of the established conversations, we could extract the domain of the external server and subsequently search
and identify the company owner of that domain in publicly available sources. Afterward, we compared the company domains with
tracker providers previously listed by Exodus Privacy for each mobile app shown in figure 4. We could find more trackers connected
to the client using Wireshark and BurpSuite for 7 out of 10 of the
studied apps than Exodus Privacy was able to list.
In our study, for MyProtein app, we found 65 additional conversations from third-party providers (among content and advertising

providers), some of whose origins we could trace to Russia, Japan,
or Ukraine (see figure 3). We classified the additionally found trackers as unexpected conversations and checked them for their payment
relevance in subsequent subsections. We found unexpected conversations collecting purchase-relevant data in 40% of the mobile apps
examined (see table 5).
Following the action protocol, as described in section 4.1, for
6 of the 10 examined apps, we found that most trackers establish
their connection with the client when the app is opened. This event
is shown in the I/O graphs of conversations for each mobile app
from Wireshark. Figure 2 shows the I/O graph of the app H&M as
an example. After opening the app, a clear upward spike appears
after the first click. The trackers maintain their connection to the
client during app usage via keep-alive signals. When opening the
app, no significant tracker connection rate could be determined for
the remaining apps. Here, the trackers established their connection
during app use or only received isolated packets from the client.

5.2.2 Tracking hardware data (Q2). Device and hardware data
are data attributes extracted from the 𝐷𝑇2 , 𝐷𝑇3 , and 𝐷𝑇6 . Thirdparty trackers usually collect these data types in the mobile apps
studied, which is confirmed for all conversations. However, some
app trackers collect more identifiable data attributes from device

ARES 2022, August 23–26, 2022, Vienna, Austria

Ezennaya-Gomez, et al.

Figure 4: Static analysis of in-app payments (𝑀2). The studied apps and the number of contained trackers are shown in the
column on the left side of the Sankey diagram. Therefore, connections to servers of these listed companies are expected. The
mid-column shows the list of trackers as the output of the Exodus Privacy tool. Finally, the last column shows the list of
company owners for each found tracker in each app.

data than others. For example, device type and device name, including the device ID of our simulated Android smartphone, were
collected by third-party trackers for all apps and the Android version. These data are usually found in the user agent field (see table
4), i.e., 𝐷𝑇6 . Moreover, data attributes 𝐷𝑇3 (e.g., country and language) are tracked by all apps. Another attribute in 𝐷𝑇3 is the time
zone in which the device is located. It is tracked by third-party
trackers on five of the analyzed apps. In addition to the analyzed
game apps (Subway Surfers and Stack), the display data (𝐷𝑇2 ) of
the simulated Android device is collected by trackers in three other
apps. It includes display height, width, pixel density, and other
device hardware data, such as the device manufacturer (i.e., Google
since we used Google Nexus 5) and the type of network connection,
i.e., whether WLAN or Ethernet, is also tracked. For the concrete
case of the app H&M, even the graphics card data rendering the
simulated Android device was read by PayPal trackers.

5.2.3 Tracking application data (Q2). In addition to hardware
and associated software data, connections with third-party trackers
usually collect metadata from various apps installed, such as application version (mapped as 𝐷𝑇3 ), which is found in seven of the
ten apps. However, some trackers may abuse metadata collection
to create a complete profile of the application’s usage. Examples of
this abuse are the Subway Surfers and eBay apps. The former had a
tracker from an advertising company called Tapjoyads. Concretely,
we could devise timestamps for the installation time of the app
(𝐷𝑇3 ) and timestamps for the usage duration of the last app in use
on the phone, which is categorized as session data attribute part
of 𝐷𝑇7 . Note that this tracker behavior was reflected in the app’s
privacy policies. Moreover, the user’s website is recorded as the
app’s policies state before starting the game. The latter app, eBay,
shared the session information with third parties. As a result, the

Revisiting Online Privacy and Security Mechanisms Applied in the In-App Payment Realm from the Consumers’ Perspective

current usage time, the number of app launches, the time spent per
session, and the total usage time of the app are tracked.
5.2.4 Tracking personal data and purchase-related data (Q3).
Regarding tracking personal data or (personally identifiable information), PII, denoted as 𝐷𝑇8 , was gathered by third-party trackers
in the 50% of the apps. In the other half of the app dataset, PII, e.g.,
email address, name, address, phone number, and banking information, was collected by the app company’s trackers and the payment
systems provider for authentication and payment process purposes.
However, during the payment process, third-party trackers receive
a specific user identification number which is refered as tag in the
payload of those trackers, e.g, client id in H&M, userId in MyProtein,
customerUserID in eBay, and fingerprint ID in Shein), which uniquely
identifies the user. For instance, in the app H&M, third-party trackers record customers’ membership status, indicating whether the
user has an account with H&M or not.
Furthermore, some purchase-relevant attributes, also denoted
as 𝐷𝑇7 , refer to the data which uniquely identifies transactions
with the payment system providers within the mobile apps studied. It includes payment authentication tokens. Payment tokens
from third-party trackers were only recorded for one of the payment gateways we used. For example, for H&M and Roastmarket,
we paid with PayPal, and the payment token was included in the
HTTP get requests and the referrers of the connecting trackers, i.e.,
adservice.google.com, and stats.g.doubleclick.
On the other hand, we categorized data attributes about products
purchased by the users as 𝐷𝑇8 along with personal data. Specifically,
third-party trackers from online couponing companies, i.e., Sovendus and Webmasterplan gathered purchase prices of the purchased
coffee from Roastmarket, including the associated 8-digit alphanumerical checkout token, i.e., EC-3RVABC12, generated after the
payment process by the PayPal API. Subsequently, the app shows
coupons for the next purchase from these couponing merchants.
Concretely, for all payments via Paypal, we found an unexpected
communication with Linkedin servers (e.g., px.ads.linkedin.com).
Within this communication, we could identify the Paypal checkout
payment token in the referer field of the GET method header. As a
response, the client gets a series of cookies from LinkedIn, which
may last two years. This communication is not reflected in our
static analysis app’s privacy policies. We also observed that the
value of the shopping basket was shared with third-party trackers
in the MyProtein and Shein apps. In the case of MyProtein, search
queries made within the app were also read by were recorded by
different trackers. For the Shein case, the app shares the user’s
click behavior and time spent on the various pages with Facebook
trackers and srmdata.com. For the latter tracker, the domain was
registered by Alibaba Cloud Computing (Beijing) Co., Ltd.. Therefore,
we can conclude the connection of the domain srmdata.com with
the most prominent IT company group in China, Alibaba Group.
Nevertheless, unfortunately, our analysis could not find additional
information about this domain.
5.2.5 Security and privacy measures (Q4). We studied how
data are secured during communications. Mainly all communications were TLS-encrypted; thus, we expect to capture and read the
packet payload. However, during our tests, it was noticeable that
many apps send the user’s login data to the server without hashing

ARES 2022, August 23–26, 2022, Vienna, Austria

it. We found our email addresses in plain text in all apps’ traffic. In
8 of the ten apps, the login password was not encrypted beyond the
TLS encryption and sent to the server in plain text. This information
was readable in a packet in JSON format in most cases. Specifically,
we could read the passwords of PayPal and Google Pay accounts
during the communication with their servers. The email address
linked to our PayPal account was also readable. Google Pay used a
bearer token for login authentication, which is not linked to a specific identity. The online payment was, therefore, only confirmed
via the password. In the case of the Klarna payment system, we
could read the account holder’s user data in plain text. Those apps
using Mastercard and Visa payment options relied only on TLS
encryption. Therefore, we could filter out the cardholder, our credit
card number, expiration date, and the three-digit CVV security code
of the card from the traffic. In most cases, this information was
readable together in a packet in JSON format.

6

DISCUSSION

The presented results describe the handling of users’ data during
an in-app purchase process of the apps mentioned above, and in
addition to that, we could proceed to answer questions Q1-Q5.
However, it should be noted that our analysis is only performed
during a man-in-the-middle attack. Therefore, only the network
communication between our client and other participants in the
network traffic could be recorded and evaluated. Therefore, further
data exchange between the providers and third-party companies is
not observable from our vantage point and constitutes future work.
By determining what data are shared with third parties by trackers while in the payment process, we answer our research questions
Q1, first question of Q2, and Q3 at once. For 𝑄1, those third-party
companies stated in the privacy policies and the static analysis of
the targeted applications were found during the dynamic analysis. Mostly these companies are advertising, and content providers
and are not essential for the correct functioning of the payment
process. On the other hand, regarding 𝑄2 and as shown in section
5, these companies gather technical information about the device.
However, during the purchase process, we discover communications, i.e., those with servers neither listed in the privacy policies
of the apps nor the static analysis, such as connection with Alibaba
Cloud Computing (Beijing) Co., Ltd. and Linkedin servers. We could
provide evidence to support the Linkedin’s connection with a list
of third-party providers found in one of Paypal’s extensive privacy
policies links 1 . At this point, we substantiate the results of previous work in [15]. After a year of these results, Linkedin continues
capturing payments tokens done in Paypal and sets cookies that last
two years. In addition, it may track the user across platforms while
logged into Linkedin services 2 . Regarding the Alibaba’s connection, we could not find evidence in the static analysis of the Shein
app when we wrote this report. The origin of these conversations
may be generated by using third-party APIs in either the wallet
or e-commerce application. These connections are mainly GET
methods in which the app saves cookies originating from these
unexpected communications. At first sight, except for those conversations with the payment providers, the rest of the communications
1 https://www.paypal.com/de/webapps/mpp/ua/legalhub-full?locale.x=en_DE
2 https://es.linkedin.com/legal/l/cookie-table?#thirdparty

ARES 2022, August 23–26, 2022, Vienna, Austria

were not essential for the correct payment process since the client
does not need to interact with those servers for authentication and
confirmation of the payment. However, we presume those trackers
are essential to fulfill the app’s business model, which relies on
advertising and tracking user behavior across multiple platforms.
These results answer 𝑄3 positively. Moreover, our results show that
this behavior is typical among other online couponing/marketing
companies, e.g., Sovendus and Webmasterplan for the Roastmarket
app. These results confirm that it is common and obeys companies’
business goals in advertising.
Furthermore, striking differences in the quantitative use of trackers can be observed. The app MyProtein, which communicates with
74 different trackers in 24 locations worldwide during the purchase
process, stands out negatively. In comparison, the app from H&M
only uses 4 trackers. In addition, significant differences can be observed in the qualitative use of the trackers. While apps like MyProtein immediately shared every click and search in the app with
multiple trackers, apps like L’Osteria are relatively sparse in their
data usage and use fewer tracker communication. The inconsistent
behavior of the various apps may be explained by market players’
uneven prioritization of online marketing strategies. Brands like
MyProtein market their products almost exclusively online and thus
see explicit user targeting through interest-based advertising as an
essential source of revenue. In contrast, restaurant chains such as
L’Osteria rely on other methods to attract customers. However, the
processing and forwarding of data to third parties are not in conflict
with the terms and conditions of any app. However, their statement
only describes very superficially that every time that data such as
hardware data, purchase behavior, or browsing behavior may be
collected, processed, and passed on to third parties.
Regarding the location of the gathered data as second question
of 𝑄2, we cannot guarantee that the data are stored in the servers’
locations, but we can confirm the data are transferred to locations
outside Europe. According to the terms and conditions of the apps,
it is unclear to which parties the data are transferred in detail.
Regarding Q4, we can identify potential security gaps after TLS
decryption during the network analysis. Surprisingly, most analyzed apps do not use additional security measures to encrypt the
user’s data after TLS encryption. Here, as recommended best practice, additional security measures such as hashing and salting the
password and email address would have been desirable. It is particularly alarming that credit card numbers, full owner name, and
the CVV security code exist in plain text when purchasing with
L’Osteria app while paying with Mastercard/Visa option. Attackers
can exploit this situation, especially when a consumer orders and
the phone is connected to public networks. Therefore, while the
app’s developer must solve this crucial security problem, a recommendation for users is to use protection methods, such as VPN
providers, especially while connected to an open network. Besides
the app’s security mechanisms, there is a lack of hashing and salting sensitive data by some in-app payment options, i.e., Klarna
and Paypal. Hazardous in Klarna’s system is the clear text representation of the account holder’s data. For our credit institution,
the user name is the same as the user’s account number. With the
knowledge of the account number and the institution’s name, an
attacker can easily reconstruct the IBAN of the person logging in.
Similar findings are also presented in previous work’s results. Thus,

Ezennaya-Gomez, et al.

we can confirm that in-app and browser-based payments have the
same behavior, mainly that the app developer’s information about
the APIs used in the apps is unclear. On the one hand, we found
the use of encryption of sensitive data positively, in some payment
options, e.g., in Gpay used obfuscation for the credit card number.
On the other hand, third-party companies’ massive usage of device
fingerprinting presents a security and privacy risk for consumers,
security experts, and law enforcement bodies. Furthermore, device
fingerprinting is used by criminals as an asset to sell in dark web
markets, further used to uncover illegal digital operations [14].
Concluding our discussion with question Q5, security and privacy dubious practices are still unsolved. We demonstrate that
despite efforts of the research community to highlight security
flaws and bring recommendations for fixing these problems, fintech
companies still have work to do to fix these long-lasting vulnerabilities.
Comparing the methodology and results presented in previous
work, we experienced the same limitations of colleagues’ work
while assessing privacy policies. In [15], the authors employed a
semiautomatic analysis of the privacy policies by web-scraping.
Web-based privacy policies exploit the fact of user fatigue and dark
patterns. Privacy policies in applications are no exception. Moreover, we could observe that applications installed do not prompt
options to check out consent about third-party trackers, unlike the
web-based e-commerce as stated in section 5. From the customers’
perspective, they are forced to agree to these conditions, which are
a prerequisite for purchasing through the app.
Additionally, our study has some limitations which are currently
in the process of being solved. The most important limitation is the
usage of Android 6 to circumvent the security mechanisms of newer
versions. For example, up to Android 6, user certificates are taken
as trusted for the phone’s communications and applications. For
this reason, we were able to decrypt the communication. However,
due to the version’s limitation, we limited our study application set
only to those targeted applications with backward compatibility
up to Android 6. This fact does not apply to the payment option
application set. In our ongoing work to solve this limitation, we
are currently targeting the Android 11 version. We must consider
that payment gateways do not work on rooted phones for security
requirements, i.e., some apps use certificate pinning for the correct
functioning or check the bootloader to ensure the integrity of their
data and communications. For these reasons, it is necessary to
mask those specific wallet apps with extra tools. Circumventing
the security toll of the OS is a more complex process than the one
presented in this article. Furthermore, we are currently studying
the implications of this process in the mass storage, 𝐷𝑆𝑇 and main
memory 𝐷𝑆 𝑀 of the phone for a digital forensic study.

7

CONCLUSIONS AND FUTURE WORK

Numerous connections are established between the customer’s
client and external servers during an in-app payment process and
for the correct functioning of the payment process. However, regardless of the connections between the client and the payment
system provider, the purpose of the rest of the connections is mainly
advertising and customer data monetization. The paper has presented an in-depth network data stream analysis on data gathering

Revisiting Online Privacy and Security Mechanisms Applied in the In-App Payment Realm from the Consumers’ Perspective

to evaluate the current data protection situation of online payment
in smartphone applications and highlight the fintech’s practices in
data gathering. To this end, we followed a digital forensic methodology used in previous works in the field. We conducted a series of
static and dynamic analyses of exemplary selected ten mobile apps
and four payment systems generally used by young consumers:
Paypal, Google Pay, Klarna Sofort, and Visa/Mastercard credit cards.
Following the methodology, we looked into the companies’ privacy
policies; we examined and acknowledged what data should be viewable and what data should be shared with third parties. During the
subsequent dynamic analysis of the payment transactions, sensitive
login and the payer’s geographic and socio-demographic data became visible. Moreover, with hardware and operating system data,
the latter were sometimes also collected by third-party trackers. In
addition to violating cross-cutting objectives, such findings represent serious security vulnerabilities. In the discussion section, we
answered our research questions Q1-Q5 in detail with the analysis
results. Furthermore, these results draw attention to the problem of
sensitive data being read out during online payment transactions by
cyberattacks. The data found can also be used in other application
fields, such as from an attacker’s point of view in the preparation (
as reconnaissance steps of the kill chain) of financial crime or by a
forensic expert in a financial crime case in steps of a forensic investigation. User awareness is primarily the first recommendation, but
it is a time-consuming investment. For this reason, we encourage
those consumer associations to conduct their traffic analysis to
complement their legal complaints to data protection officers, as
shown in this article. With the presented results, we claim that
the world of apps is troubled for consumers due to their lack of
transparency on the purchase process and user-friendly privacy
notifications.
We envisage in our future work a more detailed digital forensic
analysis applying DCEA methodology while capturing mass storage (𝐷𝑆𝑇 ) and main memory (𝐷𝑆 𝑀 ) data streams. Moreover, further
data exchange between the providers and third-party companies
is not observable from our vantage point. Therefore, it constitutes
future work collaborating with a fintech company to study the data
exchange process at a business level. Furthermore, future work will
overcome some technical limitations of the presented experimental
setup. Thus, conducting our forensic analysis on Android 11 overcoming the technical constraints that the newer versions present
regarding its network traffic generation. These new requirements
demand the use of additional tools in rooting a phone and mask the
rooting settings for the correct functioning of the wallet applications. We are currently studying the implications of modifying the
phone’s main memory, which may carry these new tools, and how
they affect the data acquisition step of the DCEA methodology.

ACKNOWLEDGMENTS
The work presented has been supported by the Bundesministerium fuer Bildung und Forschung (BMBF), under the project FINANzkriminalitaeT: MethodIsche Analyse von Bedrohungsszenarien fuer moderne Karten- und App-basierte Zahlungssysteme (FINANTIA; FKZ:13N15297).

REFERENCES
[1] 2016.
Changes to Trusted Certificate Authorities in Android Nougat.
https://android-developers.googleblog.com/2016/07/changes-to-trusted-

ARES 2022, August 23–26, 2022, Vienna, Austria

certificate.html Last accessed 21 Mar. 2022.
[2] 2021. Android Emulator for app testing Cross-platform Android Emulator for
manual and automated app testing. https://www.genymotion.com/ Last accessed
21 Mar. 22.
[3] 2021. Total global share of consumers who shopped online in 2020, by
region.
https://www.statista.com/statistics/1192578/worldwide-share-ofconsumers-that-shop-online/ Last accessed 21 Mar. 2022.
[4] 2022.
Burp Suite - Application Security Testing Software.
https://portswigger.net/burp/releases.
https://portswigger.net/burp Last
accessed 21 Mar. 2022.
[5] 2022. Exodus Privacy Reports. https://exodus-privacy.eu.org/en/. https://reports.
exodus-privacy.eu.org/de/ Last accessed 08 March. 22.
[6] 2022. F-Droid - Free and Open Source Android App Repository. https://fdroid.org/. https://f-droid.org/ Last accessed 21 Mar. 2022.
[7] 2022. Google Play. https://play.google.com/store. https://play.google.com/store
Last accessed 21 Mar. 2022.
[8] 2022. Wireshark - network protocol analyzer. https://www.wireshark.org/ Last
accessed 21 Mar. 2022.
[9] Fabio Aiolli, Mauro Conti, Ankit Gangwal, and Mirko Polato. 2019. Mind Your
Wallet’s Privacy: Identifying Bitcoin Wallet Apps and User’s Actions through
Network Traffic Analysis. In Proceedings of the 34th ACM/SIGAPP Symposium
on Applied Computing (Limassol, Cyprus) (SAC ’19). Association for Computing
Machinery, New York, NY, USA, 1484–1491. https://doi.org/10.1145/3297280.
3297430
[10] Duc Bui, Yuan Yao, Kang G. Shin, Jong-Min Choi, and Junbum Shin. 2021. Consistency Analysis of Data-Usage Purposes in Mobile Apps. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security (Virtual
Event, Republic of Korea) (CCS ’21). Association for Computing Machinery, New
York, NY, USA, 2824–2843. https://doi.org/10.1145/3460120.3484536
[11] Eoghan Casey. 2011. Digital evidence and computer crime - forensic science, computers and the Internet. Academic Press.
[12] Aldo Cortesi, Maximilian Hils, Thomas Kriechbaumer, and contributors. 20102022. mitmproxy: A free and open source interactive HTTPS proxy. https:
//mitmproxy.org/ Last accessed 21 Mar. 2022.
[13] Dan Edelstein, Nicole Coleman, E Jewett, Eliza Wells, Giorgio Caviglia, and
Mark Braude. 2015. Palladio. Visualize complex historical data with ease.
https://hdlab.stanford.edu/palladio/. https://hdlab.stanford.edu/palladio/ Last
accessed 08 March. 2022.
[14] Europol. 2020.
Internet organised crime threat assessment.
https://www.europol.europa.eu/publications-events/main-reports/internetorganised-crime-threat-assessment-iocta-2020. Last accessed 31 Mar 2022.
[15] Salatiel Ezennaya-Gomez, Stefan Kiltz, Christian Kraetzer, and Jana Dittmann.
2021. A Semi-Automated HTTP Traffic Analysis for Online Payments for Empowering Security, Forensics and Privacy Analysis. In The 16th International
Conference on Availability, Reliability and Security (Vienna, Austria) (ARES 2021).
Association for Computing Machinery, New York, NY, USA, Article 61, 8 pages.
https://doi.org/10.1145/3465481.3470114
[16] A. Feal, J. Gamba, J. Tapiador, P. Wijesekera, J. Reardon, S. Egelman, and N. VallinaRodriguez. 2021. Don’t Accept Candy from Strangers: An Analysis of Third-Party
Mobile SDKs. In D. Hallinan, R. Leenes & P. De Hert (Eds.) Data Protection and
Privacy: Data Protection and Artificial Intelligence Computers, Privacy and Data
Protection (2021), 1–28. https://doi.org/10.5040/9781509941780.ch-001
[17] FISWorldpayglobal.com. 2022.
Powering the next payments
frontier and 2022 For Financial Institutions and Merchants.
https://worldpay.globalpaymentsreport.com/en.
Last accessed 07.Jun
2022.
[18] Eric Hutchins, Michael Cloppert, and Rohan Amin. 2011. Intelligence-Driven
Computer Network Defense Informed by Analysis of Adversary Campaigns and
Intrusion Kill Chains. In The Proceedings of the 6th International Conference on
Information Warfare and Security. Citeseer, 113.
[19] Stefan Kiltz. 2020. Data-Centric Examination Approach (DCEA) for a qualitative determination of error, loss and uncertainty in digital and digitised forensics.
Ph. D. Dissertation. Otto-von-Guericke-Universitaet Magdeburg, Fakultaet fuer
Informatik. http://dx.doi.org/10.25673/34647
[20] Ravie Lakshmanan. 2020. Hackers Using Google Analytics to Bypass Web Security
and Steal Credit Cards. https://thehackernews.com/2020/06/google-analyticshacking.html Last accessed 21 Mar. 2022.
[21] Timothy Libert. 2018. An Automated Approach to Auditing Disclosure of ThirdParty Data Collection in Website Privacy Policies. In Proceedings of the 2018 World
Wide Web Conference (Lyon, France) (WWW ’18). International World Wide Web
Conferences Steering Committee, Republic and Canton of Geneva, CHE, 207–216.
https://doi.org/10.1145/3178876.3186087
[22] Taylor Soper. 2020. COVID-19 crisis sparks ’inflection point’ for online grocery
and huge revenue for Amazon. https://www.geekwire.com/2020/analyst-covid19-crisis-sparks-inflection-point-online-grocery-huge-revenue-amazon Last
accessed 21 Mar. 2022.

ARES 2022, August 23–26, 2022, Vienna, Austria

[23] Yaru Wang, Ning Zheng, Ming Xu, Tong Qiao, Qiang Zhang, Feipeng Yan, and
Jian Xu. 2019. Hierarchical Identifier: Application to User Privacy Eavesdropping
on Mobile Payment App. Sensors 19, 14 (2019). https://doi.org/10.3390/s19143052

Ezennaya-Gomez, et al.

[24] Wenbo Yang, Yuanyuan Zhang, Juanru Li, Hui Liu, Qing Wang, Yueheng Zhang,
and Dawu Gu. 2017. Show Me the Money! Finding Flawed Implementations
of Third-party In-app Payment in Android Apps.. In NDSS (NDSS 2017). 15.
https://doi.org/10.14722/ndss.2017.23091

